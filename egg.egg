# Egg grammar for Egg grammars.
#
# Author: Aaron Moss

{%
#include <string>

#include "ast.hpp"
%}

grammar: ast::ptr<ast::grammar> =
		_ out_action? rule+ out_action? end_of_file

out_action: std::string =
		OUT_BEGIN < ( !OUT_END . )* > OUT_END _

rule: ast::ptr<ast::grammar_rule> =
		identifier ( BIND type_id )? EQUAL choice

identifier: std::string =
		< [A-Za-z_][A-Za-z_0-9]* > _

type_id: std::string =
		< identifier ( "::" _ type_id )* 
			( '<' _ type_id ( ',' _ type_id )* '>' _ )? >

choice: ast::ptr<ast::alt_matcher> =
		sequence ( PIPE sequence )*

sequence: ast::ptr<ast::seq_matcher> =
		( expression | action )+

expression: ast::ptr<ast::matcher> =
		( AND | NOT )? primary ( OPT | STAR | PLUS )? _

primary: ast::ptr<ast::matcher> =
		identifier !( ( BIND type_id )? EQUAL ) ( BIND identifier )?
		| OPEN choice CLOSE
		| char_literal
		| str_literal
		| char_class
		| ANY
		| EMPTY
		| BEGIN sequence END

action: ast::ptr<ast::action_matcher> =
		'{' < ( action | !'}' . )* > '}' _

char_literal: ast::ptr<ast::char_matcher> =
		'\'' < character > '\'' _

str_literal: ast::ptr<ast::str_matcher> =
		'\"' < character* > '\"' _

char_class: ast::ptr<ast::range_matcher> =
		'[' < ( !']' char_range )* > ']' _

char_range: ast::char_range =
		character '-' character 
		| character

character: char =
		'\\' [nrt\'\"\\]
		| ![\'\"\\] .

OUT_BEGIN =		"{%"
OUT_END =		"%}"
BIND =			':' _
EQUAL =			'=' _
PIPE =			'|' _
AND =			'&' _
NOT =			'!' _
OPT =			'?' _
STAR =			'*' _
PLUS =			'+' _
OPEN =			'(' _
CLOSE =			')' _
ANY =			'.' _
EMPTY =			';' _
BEGIN =			'<' _
END =			'>' _

_ =		 		( space | comment )*
space =			' ' | '\t' | end_of_line
comment =		'#' ( !end_of_line . )* end_of_line
end_of_line = 	"\r\n" | '\n' | '\r'
end_of_file = 	!.

