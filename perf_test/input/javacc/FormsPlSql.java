/* Generated By:JavaCC: Do not edit this line. FormsPlSql.java */
import java.io.* ;

class FormsPlSql implements FormsPlSqlConstants {
    public static void main( String args[] )
        throws ParseException
        {

        FormsPlSql p = null ;
        if ( args.length < 1  ) {
            System.out.println("Reading from stdin") ;
            p = new FormsPlSql(System.in) ;
        }
        else {
            try {
                p = new FormsPlSql(new DataInputStream(
                                new FileInputStream(args[0]))) ;
            }
            catch (FileNotFoundException e) {
                System.out.println("File " + args[0] +
                                " not found. Reading from stdin") ;
                p = new FormsPlSql(System.in) ;
            }
        } // else ends here

        if ( args.length > 0 ) {
            System.out.println(args[0]) ;
        }
        p.CompilationUnit() ;
        System.out.println("Parse Successfull") ;

    }

/* Represents a PLSQL code block. */
  static final public void CompilationUnit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_PROCEDURE:
      ProcedureDeclaration();
      break;
    case K_FUNCTION:
      FunctionDeclaration();
      break;
    case K_BEGIN:
    case K_CLOSE:
    case K_COMMIT:
    case K_DECLARE:
    case K_DELETE:
    case K_EXIT:
    case K_FETCH:
    case K_FOR:
    case K_GOTO:
    case K_IF:
    case K_INSERT:
    case K_LOCK:
    case K_LOOP:
    case K_NULL:
    case K_OPEN:
    case K_RAISE:
    case K_RETURN:
    case K_ROLLBACK:
    case K_SAVEPOINT:
    case K_SELECT:
    case K_SET:
    case K_UPDATE:
    case K_WHILE:
    case S_IDENTIFIER:
    case S_BIND:
    case 130:
      SequenceOfStatements();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DeclarationSection() throws ParseException {
    jj_consume_token(K_DECLARE);
    Declarations();
  }

  static final public void Declarations() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        IdentifierDeclaration();
        break;
      case K_CURSOR:
        CursorDeclaration();
        break;
      case K_PRAGMA:
        PragmaDeclaration();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(123);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CURSOR:
      case K_PRAGMA:
      case S_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_FUNCTION:
      case K_PROCEDURE:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PROCEDURE:
        ProcedureDeclaration();
        break;
      case K_FUNCTION:
        FunctionDeclaration();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void IdentifierDeclaration() throws ParseException {
    jj_consume_token(S_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CONSTANT:
      ConstantDeclaration();
      break;
    case K_BINARY_INTEGER:
    case K_BOOLEAN:
    case K_CHAR:
    case K_DATE:
    case K_FLOAT:
    case K_INTEGER:
    case K_NATURAL:
    case K_NUMBER:
    case K_REAL:
    case K_VARCHAR2:
    case K_VARCHAR:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      VariableDeclaration();
      break;
    case K_EXCEPTION:
      ExceptionDeclaration();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void CursorDeclaration() throws ParseException {
    jj_consume_token(K_CURSOR);
    jj_consume_token(S_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 124:
      jj_consume_token(124);
      ParameterList();
      jj_consume_token(125);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(K_IS);
    SelectStatement();
  }

  static final public void ProcedureDeclaration() throws ParseException {
    jj_consume_token(K_PROCEDURE);
    jj_consume_token(S_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 124:
      jj_consume_token(124);
      ParameterList();
      jj_consume_token(125);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 123:
      jj_consume_token(123);
      break;
    case K_IS:
      jj_consume_token(K_IS);
      ProcedureBody();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ProcedureBody() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CURSOR:
    case K_PRAGMA:
    case S_IDENTIFIER:
      Declarations();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    BeginEndBlock();
  }

  static final public void FunctionDeclaration() throws ParseException {
    jj_consume_token(K_FUNCTION);
    jj_consume_token(S_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 124:
      jj_consume_token(124);
      ParameterList();
      jj_consume_token(125);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(K_RETURN);
    TypeDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 123:
      jj_consume_token(123);
      break;
    case K_IS:
      jj_consume_token(K_IS);
      FunctionBody();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FunctionBody() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CURSOR:
    case K_PRAGMA:
    case S_IDENTIFIER:
      Declarations();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    BeginEndBlock();
  }

  static final public void PragmaDeclaration() throws ParseException {
    jj_consume_token(K_PRAGMA);
    jj_consume_token(K_EXCEPTION_INIT);
    jj_consume_token(124);
    NumOrID();
    jj_consume_token(126);
    NumOrID();
    jj_consume_token(125);
  }

  static final public void VariableDeclaration() throws ParseException {
    TypeDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      jj_consume_token(K_NULL);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DEFAULT:
    case 127:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 127:
        jj_consume_token(127);
        break;
      case K_DEFAULT:
        jj_consume_token(K_DEFAULT);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PlSqlExpression();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  static final public void ConstantDeclaration() throws ParseException {
    jj_consume_token(K_CONSTANT);
    TypeDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      jj_consume_token(K_NULL);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 127:
      jj_consume_token(127);
      break;
    case K_DEFAULT:
      jj_consume_token(K_DEFAULT);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    PlSqlExpression();
  }

  static final public void TypeDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_BINARY_INTEGER:
    case K_BOOLEAN:
    case K_CHAR:
    case K_DATE:
    case K_FLOAT:
    case K_INTEGER:
    case K_NATURAL:
    case K_NUMBER:
    case K_REAL:
    case K_VARCHAR2:
    case K_VARCHAR:
      BasicDataTypeDeclaration();
      break;
    default:
      jj_la1[19] = jj_gen;
      if (jj_2_1(2)) {
        jj_consume_token(S_IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 128:
          jj_consume_token(128);
          break;
        case 129:
          jj_consume_token(129);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_2(2147483647)) {
        TableColumn();
        jj_consume_token(128);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
          jj_consume_token(S_IDENTIFIER);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void BasicDataTypeDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CHAR:
    case K_FLOAT:
    case K_INTEGER:
    case K_NATURAL:
    case K_NUMBER:
    case K_REAL:
    case K_VARCHAR2:
    case K_VARCHAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CHAR:
        jj_consume_token(K_CHAR);
        break;
      case K_VARCHAR:
        jj_consume_token(K_VARCHAR);
        break;
      case K_VARCHAR2:
        jj_consume_token(K_VARCHAR2);
        break;
      case K_INTEGER:
        jj_consume_token(K_INTEGER);
        break;
      case K_NUMBER:
        jj_consume_token(K_NUMBER);
        break;
      case K_NATURAL:
        jj_consume_token(K_NATURAL);
        break;
      case K_REAL:
        jj_consume_token(K_REAL);
        break;
      case K_FLOAT:
        jj_consume_token(K_FLOAT);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 124:
        jj_consume_token(124);
        jj_consume_token(S_NUMBER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 126:
          jj_consume_token(126);
          jj_consume_token(S_NUMBER);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        jj_consume_token(125);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      break;
    case K_DATE:
      jj_consume_token(K_DATE);
      break;
    case K_BINARY_INTEGER:
      jj_consume_token(K_BINARY_INTEGER);
      break;
    case K_BOOLEAN:
      jj_consume_token(K_BOOLEAN);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExceptionDeclaration() throws ParseException {
    jj_consume_token(K_EXCEPTION);
  }

/* ---------------- DECLARATIONS SECTION ends here ------------------ */

/* ---------------- Code Section starts here ---------------------- */
  static final public void BeginEndBlock() throws ParseException {
    jj_consume_token(K_BEGIN);
    SequenceOfStatements();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_EXCEPTION:
      ExceptionBlock();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(K_END);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(123);
  }

  static final public void SequenceOfStatements() throws ParseException {
    label_3:
    while (true) {
      PLSQLStatement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_BEGIN:
      case K_CLOSE:
      case K_COMMIT:
      case K_DECLARE:
      case K_DELETE:
      case K_EXIT:
      case K_FETCH:
      case K_FOR:
      case K_GOTO:
      case K_IF:
      case K_INSERT:
      case K_LOCK:
      case K_LOOP:
      case K_NULL:
      case K_OPEN:
      case K_RAISE:
      case K_RETURN:
      case K_ROLLBACK:
      case K_SAVEPOINT:
      case K_SELECT:
      case K_SET:
      case K_UPDATE:
      case K_WHILE:
      case S_IDENTIFIER:
      case S_BIND:
      case 130:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_3;
      }
    }
  }

  static final public void ExceptionBlock() throws ParseException {
    jj_consume_token(K_EXCEPTION);
    label_4:
    while (true) {
      ExceptionHandler();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHEN:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_4;
      }
    }
  }

  static final public void ExceptionHandler() throws ParseException {
    jj_consume_token(K_WHEN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OR:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_5;
        }
        jj_consume_token(K_OR);
        jj_consume_token(S_IDENTIFIER);
      }
      break;
    case K_OTHERS:
      jj_consume_token(K_OTHERS);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(K_THEN);
    SequenceOfStatements();
  }

  static final public void PLSQLStatement() throws ParseException {
    if (jj_2_3(2147483647)) {
      SubroutineCall();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_BIND:
        AssignmentStatement();
        break;
      case K_EXIT:
        ExitStatement();
        break;
      case K_GOTO:
        GotoStatement();
        break;
      case K_IF:
        IfStatement();
        break;
      case K_FOR:
      case K_LOOP:
      case K_WHILE:
        LoopStatement();
        break;
      case K_NULL:
        NullStatement();
        break;
      case K_RAISE:
        RaiseStatement();
        break;
      case K_RETURN:
        ReturnStatement();
        break;
      case K_CLOSE:
      case K_COMMIT:
      case K_DELETE:
      case K_FETCH:
      case K_INSERT:
      case K_LOCK:
      case K_OPEN:
      case K_ROLLBACK:
      case K_SAVEPOINT:
      case K_SELECT:
      case K_SET:
      case K_UPDATE:
        SQLStatement();
        break;
      case 130:
        LabelDeclaration();
        break;
      case K_BEGIN:
      case K_DECLARE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DECLARE:
          DeclarationSection();
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        BeginEndBlock();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void LabelDeclaration() throws ParseException {
    jj_consume_token(130);
    jj_consume_token(S_IDENTIFIER);
    jj_consume_token(131);
  }

  static final public void SQLStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CLOSE:
      CloseStatement();
      break;
    case K_COMMIT:
      CommitStatement();
      break;
    case K_DELETE:
      DeleteStatement();
      break;
    case K_FETCH:
      FetchStatement();
      break;
    case K_INSERT:
      InsertStatement();
      break;
    case K_LOCK:
      LockTableStatement();
      break;
    case K_OPEN:
      OpenStatement();
      break;
    case K_ROLLBACK:
      RollbackStatement();
      break;
    case K_SAVEPOINT:
      SavepointStatement();
      break;
    case K_SELECT:
      QueryStatement();
      break;
    case K_SET:
      SetTransactionStatement();
      break;
    case K_UPDATE:
      UpdateStatement();
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void SubroutineCall() throws ParseException {
    jj_consume_token(S_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 132:
      jj_consume_token(132);
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 124:
      jj_consume_token(124);
      Arguments();
      jj_consume_token(125);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(123);
  }

  static final public void AssignmentStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 132:
        jj_consume_token(132);
        jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(127);
      PlSqlExpression();
      break;
    case S_BIND:
      jj_consume_token(S_BIND);
      jj_consume_token(127);
      PlSqlExpression();
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(123);
  }

  static final public void ExitStatement() throws ParseException {
    jj_consume_token(K_EXIT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHEN:
      jj_consume_token(K_WHEN);
      PlSqlExpression();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(123);
  }

  static final public void GotoStatement() throws ParseException {
    jj_consume_token(K_GOTO);
    jj_consume_token(S_IDENTIFIER);
    jj_consume_token(123);
  }

  static final public void IfStatement() throws ParseException {
    jj_consume_token(K_IF);
    PlSqlExpression();
    jj_consume_token(K_THEN);
    SequenceOfStatements();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ELSIF:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_6;
      }
      jj_consume_token(K_ELSIF);
      PlSqlExpression();
      jj_consume_token(K_THEN);
      SequenceOfStatements();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ELSE:
      jj_consume_token(K_ELSE);
      SequenceOfStatements();
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(K_END);
    jj_consume_token(K_IF);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(123);
  }

  static final public void LoopStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_LOOP:
      NormalLoop();
      break;
    case K_WHILE:
      WhileLoop();
      break;
    case K_FOR:
      ForLoop();
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void NormalLoop() throws ParseException {
    jj_consume_token(K_LOOP);
    SequenceOfStatements();
    jj_consume_token(K_END);
    jj_consume_token(K_LOOP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    jj_consume_token(123);
  }

  static final public void WhileLoop() throws ParseException {
    jj_consume_token(K_WHILE);
    PlSqlExpression();
    NormalLoop();
  }

  static final public void ForLoop() throws ParseException {
    if (jj_2_4(2147483647)) {
      NumericForLoop();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_FOR:
        CursorForLoop();
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void NumericForLoopLookahead() throws ParseException {
    jj_consume_token(K_FOR);
    jj_consume_token(S_IDENTIFIER);
    jj_consume_token(K_IN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_REVERSE:
      jj_consume_token(K_REVERSE);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    PlSqlSimpleExpression();
    jj_consume_token(133);
  }

  static final public void NumericForLoop() throws ParseException {
    jj_consume_token(K_FOR);
    jj_consume_token(S_IDENTIFIER);
    jj_consume_token(K_IN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_REVERSE:
      jj_consume_token(K_REVERSE);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    PlSqlSimpleExpression();
    jj_consume_token(133);
    PlSqlSimpleExpression();
    NormalLoop();
  }

  static final public void CursorForLoop() throws ParseException {
    jj_consume_token(K_FOR);
    jj_consume_token(S_IDENTIFIER);
    jj_consume_token(K_IN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 124:
        jj_consume_token(124);
        Arguments();
        jj_consume_token(125);
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      break;
    case 124:
      jj_consume_token(124);
      SelectStatement();
      jj_consume_token(125);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    NormalLoop();
  }

  static final public void NullStatement() throws ParseException {
    jj_consume_token(K_NULL);
    jj_consume_token(123);
  }

  static final public void RaiseStatement() throws ParseException {
    jj_consume_token(K_RAISE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(123);
  }

  static final public void ReturnStatement() throws ParseException {
    jj_consume_token(K_RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
    case K_NULL:
    case K_SQL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case 124:
    case 135:
    case 136:
      PlSqlExpression();
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    jj_consume_token(123);
  }

  static final public void CloseStatement() throws ParseException {
    jj_consume_token(K_CLOSE);
    jj_consume_token(S_IDENTIFIER);
    jj_consume_token(123);
  }

  static final public void CommitStatement() throws ParseException {
    jj_consume_token(K_COMMIT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WORK:
      jj_consume_token(K_WORK);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_COMMENT:
      jj_consume_token(K_COMMENT);
      jj_consume_token(S_CHAR_LITERAL);
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    jj_consume_token(123);
  }

  static final public void FetchStatement() throws ParseException {
    jj_consume_token(K_FETCH);
    jj_consume_token(S_IDENTIFIER);
    jj_consume_token(K_INTO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    case S_BIND:
      jj_consume_token(S_BIND);
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 126:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_7;
      }
      jj_consume_token(126);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        jj_consume_token(S_IDENTIFIER);
        break;
      case S_BIND:
        jj_consume_token(S_BIND);
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(123);
  }

  static final public void LockTableStatement() throws ParseException {
    jj_consume_token(K_LOCK);
    jj_consume_token(K_TABLE);
    TableReference();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 126:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_8;
      }
      jj_consume_token(126);
      TableReference();
    }
    jj_consume_token(K_IN);
    LockMode();
    jj_consume_token(K_MODE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOWAIT:
      jj_consume_token(K_NOWAIT);
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    jj_consume_token(123);
  }

  static final public void OpenStatement() throws ParseException {
    jj_consume_token(K_OPEN);
    jj_consume_token(S_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 124:
      jj_consume_token(124);
      Arguments();
      jj_consume_token(125);
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    jj_consume_token(123);
  }

  static final public void RollbackStatement() throws ParseException {
    jj_consume_token(K_ROLLBACK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WORK:
      jj_consume_token(K_WORK);
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_TO:
      jj_consume_token(K_TO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SAVEPOINT:
        jj_consume_token(K_SAVEPOINT);
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_COMMENT:
      jj_consume_token(K_COMMENT);
      jj_consume_token(S_CHAR_LITERAL);
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    jj_consume_token(123);
  }

  static final public void SetTransactionStatement() throws ParseException {
    jj_consume_token(K_SET);
    jj_consume_token(K_TRANSACTION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_READ:
      jj_consume_token(K_READ);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ONLY:
        jj_consume_token(K_ONLY);
        break;
      case K_WRITE:
        jj_consume_token(K_WRITE);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case K_USE:
      jj_consume_token(K_USE);
      jj_consume_token(K_ROLLBACK);
      jj_consume_token(K_SEGMENT);
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(123);
  }

  static final public void LockMode() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ROW:
      jj_consume_token(K_ROW);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SHARE:
        jj_consume_token(K_SHARE);
        break;
      case K_EXCLUSIVE:
        jj_consume_token(K_EXCLUSIVE);
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case K_SHARE:
      jj_consume_token(K_SHARE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ROW:
      case K_UPDATE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_UPDATE:
          jj_consume_token(K_UPDATE);
          break;
        case K_ROW:
          jj_consume_token(K_ROW);
          jj_consume_token(K_EXCLUSIVE);
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      break;
    case K_EXCLUSIVE:
      jj_consume_token(K_EXCLUSIVE);
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void SavepointStatement() throws ParseException {
    jj_consume_token(K_SAVEPOINT);
    jj_consume_token(S_IDENTIFIER);
    jj_consume_token(123);
  }

  static final public void UpdateStatement() throws ParseException {
    jj_consume_token(K_UPDATE);
    TableReference();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    jj_consume_token(K_SET);
    ColumnValues();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      jj_consume_token(K_WHERE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_EXISTS:
      case K_NOT:
      case K_NULL:
      case K_PRIOR:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 124:
      case 135:
      case 136:
        SQLExpression();
        break;
      case K_CURRENT:
        jj_consume_token(K_CURRENT);
        jj_consume_token(K_OF);
        jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    jj_consume_token(123);
  }

  static final public void ColumnValues() throws ParseException {
    TableColumn();
    jj_consume_token(134);
    UpdatedValue();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 126:
        ;
        break;
      default:
        jj_la1[73] = jj_gen;
        break label_9;
      }
      jj_consume_token(126);
      TableColumn();
      jj_consume_token(134);
      UpdatedValue();
    }
  }

  static final public void UpdatedValue() throws ParseException {
    if (jj_2_5(2147483647)) {
      jj_consume_token(124);
      SelectStatement();
      jj_consume_token(125);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
      case K_NULL:
      case K_SQL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case 124:
      case 135:
      case 136:
        PlSqlExpression();
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void InsertStatement() throws ParseException {
    jj_consume_token(K_INSERT);
    jj_consume_token(K_INTO);
    TableReference();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 124:
      jj_consume_token(124);
      TableColumn();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 126:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_10;
        }
        jj_consume_token(126);
        TableColumn();
      }
      jj_consume_token(125);
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_VALUES:
      jj_consume_token(K_VALUES);
      jj_consume_token(124);
      PlSqlExpressionList();
      jj_consume_token(125);
      break;
    case K_SELECT:
      SelectStatement();
      break;
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(123);
  }

  static final public void DeleteStatement() throws ParseException {
    jj_consume_token(K_DELETE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FROM:
      jj_consume_token(K_FROM);
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    TableReference();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      jj_consume_token(K_WHERE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_EXISTS:
      case K_NOT:
      case K_NULL:
      case K_PRIOR:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 124:
      case 135:
      case 136:
        SQLExpression();
        break;
      case K_CURRENT:
        jj_consume_token(K_CURRENT);
        jj_consume_token(K_OF);
        jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    jj_consume_token(123);
  }

  static final public void QueryStatement() throws ParseException {
    SelectStatement();
    jj_consume_token(123);
  }

// PLSQL Expression and it's childs
  static final public void PlSqlExpression() throws ParseException {
    PlSqlAndExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OR:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_11;
      }
      jj_consume_token(K_OR);
      PlSqlAndExpression();
    }
  }

  static final public void PlSqlAndExpression() throws ParseException {
    PlSqlUnaryLogicalExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_12;
      }
      jj_consume_token(K_AND);
      PlSqlUnaryLogicalExpression();
    }
  }

  static final public void PlSqlUnaryLogicalExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[84] = jj_gen;
      ;
    }
    PlSqlRelationalExpression();
  }

  static final public void PlSqlRelationalExpression() throws ParseException {
    PlSqlSimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_BETWEEN:
    case K_IN:
    case K_IS:
    case K_LIKE:
    case K_NOT:
    case 134:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 134:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
        Relop();
        PlSqlSimpleExpression();
        break;
      default:
        jj_la1[85] = jj_gen;
        if (jj_2_6(2)) {
          PlSqlInClause();
        } else if (jj_2_7(2)) {
          PlSqlBetweenClause();
        } else if (jj_2_8(2)) {
          PlSqlLikeClause();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_IS:
            IsNullClause();
            break;
          default:
            jj_la1[86] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
  }

  static final public void PlSqlExpressionList() throws ParseException {
    PlSqlExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 126:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_13;
      }
      jj_consume_token(126);
      PlSqlExpression();
    }
  }

  static final public void PlSqlInClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[89] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
    jj_consume_token(124);
    PlSqlExpressionList();
    jj_consume_token(125);
  }

  static final public void PlSqlBetweenClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[90] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    PlSqlSimpleExpression();
    jj_consume_token(K_AND);
    PlSqlSimpleExpression();
  }

  static final public void PlSqlLikeClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
    jj_consume_token(K_LIKE);
    PlSqlSimpleExpression();
  }

  static final public void IsNullClause() throws ParseException {
    jj_consume_token(K_IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[92] = jj_gen;
      ;
    }
    jj_consume_token(K_NULL);
  }

  static final public void PlSqlSimpleExpression() throws ParseException {
    PlSqlMultiplicativeExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 135:
      case 136:
      case 137:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 135:
        jj_consume_token(135);
        break;
      case 136:
        jj_consume_token(136);
        break;
      case 137:
        jj_consume_token(137);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PlSqlMultiplicativeExpression();
    }
  }

  static final public void PlSqlMultiplicativeExpression() throws ParseException {
    PlSqlExpotentExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 138:
      case 139:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 138:
        jj_consume_token(138);
        break;
      case 139:
        jj_consume_token(139);
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PlSqlExpotentExpression();
    }
  }

  static final public void PlSqlExpotentExpression() throws ParseException {
    PlSqlUnaryExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 140:
        ;
        break;
      default:
        jj_la1[97] = jj_gen;
        break label_16;
      }
      jj_consume_token(140);
      PlSqlUnaryExpression();
    }
  }

  static final public void PlSqlUnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 135:
    case 136:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 135:
        jj_consume_token(135);
        break;
      case 136:
        jj_consume_token(136);
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PlSqlPrimaryExpression();
      break;
    case K_NULL:
    case K_SQL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case 124:
      PlSqlPrimaryExpression();
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void PlSqlPrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
      jj_consume_token(K_NULL);
      break;
    default:
      jj_la1[103] = jj_gen;
      if (jj_2_9(2)) {
        jj_consume_token(S_IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 141:
          jj_consume_token(141);
          break;
        case 142:
          jj_consume_token(142);
          break;
        case 143:
          jj_consume_token(143);
          break;
        case 144:
          jj_consume_token(144);
          break;
        default:
          jj_la1[100] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_10(2)) {
        jj_consume_token(S_IDENTIFIER);
        jj_consume_token(124);
        Arguments();
        jj_consume_token(125);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
          jj_consume_token(S_IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 132:
            jj_consume_token(132);
            jj_consume_token(S_IDENTIFIER);
            break;
          default:
            jj_la1[101] = jj_gen;
            ;
          }
          break;
        case K_SQL:
          jj_consume_token(K_SQL);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 141:
            jj_consume_token(141);
            break;
          case 142:
            jj_consume_token(142);
            break;
          case 143:
            jj_consume_token(143);
            break;
          case 144:
            jj_consume_token(144);
            break;
          default:
            jj_la1[102] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case S_NUMBER:
          jj_consume_token(S_NUMBER);
          break;
        case S_CHAR_LITERAL:
          jj_consume_token(S_CHAR_LITERAL);
          break;
        case S_BIND:
          jj_consume_token(S_BIND);
          break;
        case 124:
          jj_consume_token(124);
          PlSqlExpression();
          jj_consume_token(125);
          break;
        default:
          jj_la1[104] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

/* ----------------------- PLSQL Code Block Ends here -------------- */

/* ---------------- General Productions --------------------- */
  static final public void TableColumn() throws ParseException {
    OracleObjectName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 132:
      jj_consume_token(132);
      OracleObjectName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 132:
        jj_consume_token(132);
        OracleObjectName();
        break;
      default:
        jj_la1[105] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[106] = jj_gen;
      ;
    }
  }

  static final public void OracleObjectName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    case S_QUOTED_IDENTIFIER:
      jj_consume_token(S_QUOTED_IDENTIFIER);
      break;
    default:
      jj_la1[107] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Relop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 134:
      jj_consume_token(134);
      break;
    case 145:
      jj_consume_token(145);
      break;
    case 146:
      jj_consume_token(146);
      break;
    case 147:
      jj_consume_token(147);
      break;
    case 148:
      jj_consume_token(148);
      break;
    case 149:
      jj_consume_token(149);
      break;
    case 150:
      jj_consume_token(150);
      break;
    case 151:
      jj_consume_token(151);
      break;
    default:
      jj_la1[108] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void TableReference() throws ParseException {
    OracleObjectName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 132:
      jj_consume_token(132);
      OracleObjectName();
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
  }

  static final public void ParameterList() throws ParseException {
    Parameter();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 126:
        ;
        break;
      default:
        jj_la1[110] = jj_gen;
        break label_17;
      }
      jj_consume_token(126);
      Parameter();
    }
  }

  static final public void NumOrID() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    case S_NUMBER:
    case 135:
    case 136:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 135:
      case 136:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 135:
          jj_consume_token(135);
          break;
        case 136:
          jj_consume_token(136);
          break;
        default:
          jj_la1[111] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[112] = jj_gen;
        ;
      }
      jj_consume_token(S_NUMBER);
      break;
    default:
      jj_la1[113] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Parameter() throws ParseException {
    jj_consume_token(S_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_BINARY_INTEGER:
    case K_BOOLEAN:
    case K_CHAR:
    case K_DATE:
    case K_FLOAT:
    case K_IN:
    case K_INTEGER:
    case K_NATURAL:
    case K_NUMBER:
    case K_OUT:
    case K_REAL:
    case K_VARCHAR2:
    case K_VARCHAR:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_IN:
        jj_consume_token(K_IN);
        break;
      default:
        jj_la1[114] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OUT:
        jj_consume_token(K_OUT);
        break;
      default:
        jj_la1[115] = jj_gen;
        ;
      }
      TypeDeclaration();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEFAULT:
      case 127:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 127:
          jj_consume_token(127);
          break;
        case K_DEFAULT:
          jj_consume_token(K_DEFAULT);
          break;
        default:
          jj_la1[116] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PlSqlExpression();
        break;
      default:
        jj_la1[117] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
  }

// Just a synonym for PlSqlExpressionList for better readability
  static final public void Arguments() throws ParseException {
    PlSqlExpressionList();
  }

/* --------------- General Productions ends here --------------- */

/* ----------- SQL productions start here ----------------- */
  static final public void SelectStatement() throws ParseException {
    SelectWithoutOrder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ORDER:
      OrderByClause();
      break;
    default:
      jj_la1[119] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FOR:
      ForUpdateClause();
      break;
    default:
      jj_la1[120] = jj_gen;
      ;
    }
  }

  static final public void SelectWithoutOrder() throws ParseException {
    jj_consume_token(K_SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALL:
    case K_DISTINCT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
        jj_consume_token(K_ALL);
        break;
      case K_DISTINCT:
        jj_consume_token(K_DISTINCT);
        break;
      default:
        jj_la1[121] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[122] = jj_gen;
      ;
    }
    SelectList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INTO:
      IntoClause();
      break;
    default:
      jj_la1[123] = jj_gen;
      ;
    }
    FromClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      WhereClause();
      break;
    default:
      jj_la1[124] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CONNECT:
    case K_START:
      ConnectClause();
      break;
    default:
      jj_la1[125] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_GROUP:
      GroupByClause();
      break;
    default:
      jj_la1[126] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INTERSECT:
    case K_MINUS:
    case K_UNION:
      SetClause();
      break;
    default:
      jj_la1[127] = jj_gen;
      ;
    }
  }

/* Checks for whatever follows  SELECT */
  static final public void SelectList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 138:
      jj_consume_token(138);
      break;
    case K_NULL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 124:
    case 135:
    case 136:
      SelectItem();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 126:
          ;
          break;
        default:
          jj_la1[128] = jj_gen;
          break label_18;
        }
        jj_consume_token(126);
        SelectItem();
      }
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void SelectItem() throws ParseException {
    if (jj_2_11(2)) {
      OracleObjectName();
      jj_consume_token(152);
    } else if (jj_2_12(4)) {
      OracleObjectName();
      jj_consume_token(132);
      OracleObjectName();
      jj_consume_token(152);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 124:
      case 135:
      case 136:
        SQLSimpleExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
          jj_consume_token(S_IDENTIFIER);
          break;
        default:
          jj_la1[130] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void IntoClause() throws ParseException {
    jj_consume_token(K_INTO);
    IntoItem();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 126:
        ;
        break;
      default:
        jj_la1[132] = jj_gen;
        break label_19;
      }
      jj_consume_token(126);
      IntoItem();
    }
  }

  static final public void IntoItem() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 132:
        jj_consume_token(132);
        jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[133] = jj_gen;
        ;
      }
      break;
    case S_BIND:
      jj_consume_token(S_BIND);
      break;
    default:
      jj_la1[134] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FromClause() throws ParseException {
    jj_consume_token(K_FROM);
    FromItem();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 126:
        ;
        break;
      default:
        jj_la1[135] = jj_gen;
        break label_20;
      }
      jj_consume_token(126);
      FromItem();
    }
  }

  static final public void FromItem() throws ParseException {
    TableReference();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[136] = jj_gen;
      ;
    }
  }

  static final public void WhereClause() throws ParseException {
    jj_consume_token(K_WHERE);
    SQLExpression();
  }

  static final public void ConnectClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_START:
      jj_consume_token(K_START);
      jj_consume_token(K_WITH);
      SQLExpression();
      break;
    default:
      jj_la1[137] = jj_gen;
      ;
    }
    jj_consume_token(K_CONNECT);
    jj_consume_token(K_BY);
    SQLExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_START:
      jj_consume_token(K_START);
      jj_consume_token(K_WITH);
      SQLExpression();
      break;
    default:
      jj_la1[138] = jj_gen;
      ;
    }
  }

  static final public void GroupByClause() throws ParseException {
    jj_consume_token(K_GROUP);
    jj_consume_token(K_BY);
    SQLExpressionList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_HAVING:
      jj_consume_token(K_HAVING);
      SQLExpression();
      break;
    default:
      jj_la1[139] = jj_gen;
      ;
    }
  }

  static final public void SetClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_UNION:
      jj_consume_token(K_UNION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
        jj_consume_token(K_ALL);
        break;
      default:
        jj_la1[140] = jj_gen;
        ;
      }
      break;
    case K_INTERSECT:
      jj_consume_token(K_INTERSECT);
      break;
    case K_MINUS:
      jj_consume_token(K_MINUS);
      break;
    default:
      jj_la1[141] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_13(2147483647)) {
      jj_consume_token(124);
      SelectWithoutOrder();
      jj_consume_token(125);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SELECT:
        SelectWithoutOrder();
        break;
      default:
        jj_la1[142] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void OrderByClause() throws ParseException {
    jj_consume_token(K_ORDER);
    jj_consume_token(K_BY);
    SQLSimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ASC:
    case K_DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
        jj_consume_token(K_ASC);
        break;
      case K_DESC:
        jj_consume_token(K_DESC);
        break;
      default:
        jj_la1[143] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[144] = jj_gen;
      ;
    }
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 126:
        ;
        break;
      default:
        jj_la1[145] = jj_gen;
        break label_21;
      }
      jj_consume_token(126);
      SQLSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
      case K_DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ASC:
          jj_consume_token(K_ASC);
          break;
        case K_DESC:
          jj_consume_token(K_DESC);
          break;
        default:
          jj_la1[146] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[147] = jj_gen;
        ;
      }
    }
  }

  static final public void ForUpdateClause() throws ParseException {
    jj_consume_token(K_FOR);
    jj_consume_token(K_UPDATE);
    jj_consume_token(K_OF);
    TableColumn();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 126:
        ;
        break;
      default:
        jj_la1[148] = jj_gen;
        break label_22;
      }
      jj_consume_token(126);
      TableColumn();
    }
  }

  static final public void SQLExpression() throws ParseException {
    SQLAndExpression();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OR:
        ;
        break;
      default:
        jj_la1[149] = jj_gen;
        break label_23;
      }
      jj_consume_token(K_OR);
      SQLAndExpression();
    }
  }

  static final public void SQLAndExpression() throws ParseException {
    SQLUnaryLogicalExpression();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        ;
        break;
      default:
        jj_la1[150] = jj_gen;
        break label_24;
      }
      jj_consume_token(K_AND);
      SQLUnaryLogicalExpression();
    }
  }

  static final public void SQLUnaryLogicalExpression() throws ParseException {
    if (jj_2_14(2)) {
      ExistsClause();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
      case K_NULL:
      case K_PRIOR:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 124:
      case 135:
      case 136:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          jj_consume_token(K_NOT);
          break;
        default:
          jj_la1[151] = jj_gen;
          ;
        }
        SQLRelationalExpression();
        break;
      default:
        jj_la1[152] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void ExistsClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[153] = jj_gen;
      ;
    }
    jj_consume_token(K_EXISTS);
    jj_consume_token(124);
    SubQuery();
    jj_consume_token(125);
  }

  static final public void SQLRelationalExpression() throws ParseException {
    if (jj_2_15(2147483647)) {
      jj_consume_token(124);
      SQLExpressionList();
      jj_consume_token(125);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_PRIOR:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 124:
      case 135:
      case 136:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PRIOR:
          jj_consume_token(K_PRIOR);
          break;
        default:
          jj_la1[154] = jj_gen;
          ;
        }
        SQLSimpleExpression();
        break;
      default:
        jj_la1[155] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_BETWEEN:
    case K_IN:
    case K_IS:
    case K_LIKE:
    case K_NOT:
    case 134:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 134:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
        SQLRelationalOperatorExpression();
        break;
      default:
        jj_la1[156] = jj_gen;
        if (jj_2_16(2)) {
          SQLInClause();
        } else if (jj_2_17(2)) {
          SQLBetweenClause();
        } else if (jj_2_18(2)) {
          SQLLikeClause();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_IS:
            IsNullClause();
            break;
          default:
            jj_la1[157] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[158] = jj_gen;
      ;
    }
  }

  static final public void SQLExpressionList() throws ParseException {
    SQLSimpleExpression();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 126:
        ;
        break;
      default:
        jj_la1[159] = jj_gen;
        break label_25;
      }
      jj_consume_token(126);
      SQLSimpleExpression();
    }
  }

  static final public void SQLRelationalOperatorExpression() throws ParseException {
    Relop();
    if (jj_2_19(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_ANY:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        case K_ANY:
          jj_consume_token(K_ANY);
          break;
        default:
          jj_la1[160] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[161] = jj_gen;
        ;
      }
      jj_consume_token(124);
      SubQuery();
      jj_consume_token(125);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_PRIOR:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 124:
      case 135:
      case 136:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PRIOR:
          jj_consume_token(K_PRIOR);
          break;
        default:
          jj_la1[162] = jj_gen;
          ;
        }
        SQLSimpleExpression();
        break;
      default:
        jj_la1[163] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void SQLInClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[164] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
    jj_consume_token(124);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 124:
    case 135:
    case 136:
      SQLExpressionList();
      break;
    case K_SELECT:
      SubQuery();
      break;
    default:
      jj_la1[165] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(125);
  }

  static final public void SQLBetweenClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[166] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    SQLSimpleExpression();
    jj_consume_token(K_AND);
    SQLSimpleExpression();
  }

  static final public void SQLLikeClause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[167] = jj_gen;
      ;
    }
    jj_consume_token(K_LIKE);
    SQLSimpleExpression();
  }

  static final public void SQLSimpleExpression() throws ParseException {
    SQLMultiplicativeExpression();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 135:
      case 136:
      case 137:
        ;
        break;
      default:
        jj_la1[168] = jj_gen;
        break label_26;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 135:
        jj_consume_token(135);
        break;
      case 136:
        jj_consume_token(136);
        break;
      case 137:
        jj_consume_token(137);
        break;
      default:
        jj_la1[169] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SQLMultiplicativeExpression();
    }
  }

  static final public void SQLMultiplicativeExpression() throws ParseException {
    SQLExpotentExpression();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 138:
      case 139:
        ;
        break;
      default:
        jj_la1[170] = jj_gen;
        break label_27;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 138:
        jj_consume_token(138);
        break;
      case 139:
        jj_consume_token(139);
        break;
      default:
        jj_la1[171] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SQLExpotentExpression();
    }
  }

  static final public void SQLExpotentExpression() throws ParseException {
    SQLUnaryExpression();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 140:
        ;
        break;
      default:
        jj_la1[172] = jj_gen;
        break label_28;
      }
      jj_consume_token(140);
      SQLUnaryExpression();
    }
  }

  static final public void SQLUnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 135:
    case 136:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 135:
        jj_consume_token(135);
        break;
      case 136:
        jj_consume_token(136);
        break;
      default:
        jj_la1[173] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[174] = jj_gen;
      ;
    }
    SQLPrimaryExpression();
  }

  static final public void SQLPrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
      jj_consume_token(K_NULL);
      break;
    default:
      jj_la1[175] = jj_gen;
      if (jj_2_20(2147483647)) {
        FunctionCall();
      } else if (jj_2_21(2147483647)) {
        OuterJoinExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:
          TableColumn();
          break;
        case S_NUMBER:
          jj_consume_token(S_NUMBER);
          break;
        case S_CHAR_LITERAL:
          jj_consume_token(S_CHAR_LITERAL);
          break;
        case S_BIND:
          jj_consume_token(S_BIND);
          break;
        case 124:
          jj_consume_token(124);
          SQLExpression();
          jj_consume_token(125);
          break;
        default:
          jj_la1[176] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void FunctionCall() throws ParseException {
    OracleObjectName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 132:
      jj_consume_token(132);
      OracleObjectName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 132:
        jj_consume_token(132);
        OracleObjectName();
        break;
      default:
        jj_la1[177] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[178] = jj_gen;
      ;
    }
    jj_consume_token(124);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALL:
    case K_DISTINCT:
    case K_NULL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 124:
    case 135:
    case 136:
    case 138:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DISTINCT:
          jj_consume_token(K_DISTINCT);
          break;
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        default:
          jj_la1[179] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[180] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 124:
      case 135:
      case 136:
        SQLArguments();
        break;
      case 138:
        jj_consume_token(138);
        break;
      default:
        jj_la1[181] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[182] = jj_gen;
      ;
    }
    jj_consume_token(125);
  }

  static final public void SQLArguments() throws ParseException {
    SQLExpressionList();
  }

  static final public void OuterJoinExpression() throws ParseException {
    OracleObjectName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 132:
      jj_consume_token(132);
      OracleObjectName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 132:
        jj_consume_token(132);
        OracleObjectName();
        break;
      default:
        jj_la1[183] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[184] = jj_gen;
      ;
    }
    jj_consume_token(124);
    jj_consume_token(135);
    jj_consume_token(125);
  }

  static final public void SubQuery() throws ParseException {
    SelectWithoutOrder();
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static final private boolean jj_3R_70() {
    if (jj_scan_token(126)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  static final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  static final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_68() {
    if (jj_3R_75()) return true;
    return false;
  }

  static final private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  static final private boolean jj_3R_42() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_scan_token(125)) return true;
    return false;
  }

  static final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(125)) return true;
    return false;
  }

  static final private boolean jj_3R_86() {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  static final private boolean jj_3R_63() {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_21() {
    if (jj_3R_43()) return true;
    return false;
  }

  static final private boolean jj_3_20() {
    if (jj_3R_42()) return true;
    return false;
  }

  static final private boolean jj_3R_100() {
    if (jj_3R_103()) return true;
    return false;
  }

  static final private boolean jj_3R_67() {
    if (jj_scan_token(140)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_3R_34()) return true;
    return false;
  }

  static final private boolean jj_3R_83() {
    if (jj_scan_token(124)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(125)) return true;
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_3R_33()) return true;
    return false;
  }

  static final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) return true;
    }
    if (jj_3R_57()) return true;
    return false;
  }

  static final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) return true;
    }
    }
    if (jj_3R_48()) return true;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_3R_32()) return true;
    return false;
  }

  static final private boolean jj_3R_82() {
    if (jj_3R_29()) return true;
    return false;
  }

  static final private boolean jj_3R_81() {
    if (jj_3R_43()) return true;
    return false;
  }

  static final private boolean jj_3R_77() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  static final private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_99() {
    if (jj_3R_102()) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  static final private boolean jj_3R_80() {
    if (jj_3R_42()) return true;
    return false;
  }

  static final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_89() {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(128)) return true;
    return false;
  }

  static final private boolean jj_3R_132() {
    if (jj_3R_105()) return true;
    return false;
  }

  static final private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    return false;
  }

  static final private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    return false;
  }

  static final private boolean jj_3R_76() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_57() {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_69() {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_48() {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_41() {
    if (jj_scan_token(124)) return true;
    if (jj_scan_token(K_SELECT)) return true;
    return false;
  }

  static final private boolean jj_3R_131() {
    if (jj_3R_75()) return true;
    return false;
  }

  static final private boolean jj_3R_37() {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static final private boolean jj_3_16() {
    if (jj_3R_38()) return true;
    return false;
  }

  static final private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static final private boolean jj_3R_111() {
    if (jj_3R_103()) return true;
    return false;
  }

  static final private boolean jj_3_18() {
    if (jj_3R_40()) return true;
    return false;
  }

  static final private boolean jj_3_17() {
    if (jj_3R_39()) return true;
    return false;
  }

  static final private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_84() {
    if (jj_scan_token(126)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(124)) return true;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    if (jj_scan_token(125)) return true;
    return false;
  }

  static final private boolean jj_3R_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    return false;
  }

  static final private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(125)) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    Token xsp;
    if (jj_scan_token(124)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(124)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(K_SELECT)) return true;
    return false;
  }

  static final private boolean jj_3R_120() {
    if (jj_3R_102()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_75() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_15() {
    if (jj_scan_token(124)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(126)) return true;
    return false;
  }

  static final private boolean jj_3R_98() {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  static final private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_110() {
    if (jj_3R_120()) return true;
    return false;
  }

  static final private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    return false;
  }

  static final private boolean jj_3R_106() {
    if (jj_scan_token(124)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(125)) return true;
    return false;
  }

  static final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_94() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  static final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(125)) return true;
    return false;
  }

  static final private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    return false;
  }

  static final private boolean jj_3_14() {
    if (jj_3R_36()) return true;
    return false;
  }

  static final private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_93() {
    if (jj_3R_97()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_88() {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_94()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_13() {
    if (jj_scan_token(124)) return true;
    return false;
  }

  static final private boolean jj_3R_143() {
    if (jj_3R_109()) return true;
    return false;
  }

  static final private boolean jj_3R_142() {
    if (jj_scan_token(124)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(125)) return true;
    return false;
  }

  static final private boolean jj_3R_141() {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_140() {
    if (jj_scan_token(K_HAVING)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  static final private boolean jj_3R_127() {
    if (jj_scan_token(K_GROUP)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_139() {
    if (jj_scan_token(K_START)) return true;
    if (jj_scan_token(K_WITH)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  static final private boolean jj_3R_138() {
    if (jj_scan_token(K_START)) return true;
    if (jj_scan_token(K_WITH)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  static final private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    if (jj_scan_token(K_CONNECT)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_88()) return true;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_124() {
    if (jj_scan_token(126)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  static final private boolean jj_3R_125() {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  static final private boolean jj_3R_148() {
    if (jj_scan_token(132)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_136() {
    if (jj_scan_token(126)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  static final private boolean jj_3R_123() {
    if (jj_3R_137()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_115() {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_123()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_124()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_146() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_134() {
    if (jj_scan_token(126)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_31()) return true;
    return false;
  }

  static final private boolean jj_3R_31() {
    if (jj_scan_token(K_FOR)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(K_IN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    if (jj_scan_token(133)) return true;
    return false;
  }

  static final private boolean jj_3R_122() {
    if (jj_scan_token(K_INTO)) return true;
    if (jj_3R_135()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_136()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_145() {
    if (jj_3R_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_12() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(132)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(152)) return true;
    return false;
  }

  static final private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(152)) return true;
    return false;
  }

  static final private boolean jj_3R_121() {
    if (jj_3R_133()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_119() {
    if (jj_3R_128()) return true;
    return false;
  }

  static final private boolean jj_3R_118() {
    if (jj_3R_127()) return true;
    return false;
  }

  static final private boolean jj_3R_117() {
    if (jj_3R_126()) return true;
    return false;
  }

  static final private boolean jj_3R_116() {
    if (jj_3R_125()) return true;
    return false;
  }

  static final private boolean jj_3R_114() {
    if (jj_3R_122()) return true;
    return false;
  }

  static final private boolean jj_3R_109() {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    xsp = jj_scanpos;
    if (jj_3R_116()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_46() {
    if (jj_scan_token(124)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(125)) return true;
    return false;
  }

  static final private boolean jj_3R_53() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static final private boolean jj_3R_54() {
    if (jj_3R_63()) return true;
    return false;
  }

  static final private boolean jj_3R_147() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static final private boolean jj_3R_45() {
    if (jj_scan_token(132)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_44() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_137() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_30() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_scan_token(123)) return true;
    return false;
  }

  static final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_29() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_96() {
    if (jj_scan_token(132)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  static final private boolean jj_3R_92() {
    if (jj_scan_token(124)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(125)) return true;
    return false;
  }

  static final private boolean jj_3R_72() {
    if (jj_scan_token(140)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  static final private boolean jj_3R_91() {
    if (jj_scan_token(K_SQL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) return true;
    }
    if (jj_3R_64()) return true;
    return false;
  }

  static final private boolean jj_3R_90() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(124)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(125)) return true;
    return false;
  }

  static final private boolean jj_3R_62() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) return true;
    }
    }
    if (jj_3R_55()) return true;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_3R_87()) return true;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_30()) return true;
    return false;
  }

  static final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) return true;
    }
    if (jj_3R_87()) return true;
    return false;
  }

  static final private boolean jj_3R_59() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static final private boolean jj_3R_64() {
    if (jj_3R_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_52() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_55() {
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_65()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_61() {
    if (jj_3R_68()) return true;
    return false;
  }

  static final private boolean jj_3R_47() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_105() {
    if (jj_3R_109()) return true;
    return false;
  }

  static final private boolean jj_3R_50() {
    if (jj_scan_token(132)) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    return false;
  }

  static final private boolean jj_3R_103() {
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  static final private boolean jj_3R_43() {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    if (jj_scan_token(124)) return true;
    if (jj_scan_token(135)) return true;
    if (jj_scan_token(125)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public FormsPlSqlTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[185];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xa050400,0x400000,0x400000,0x0,0x0,0x90b000,0x0,0x0,0x0,0x400000,0x0,0x0,0x400000,0x0,0x4000000,0x4000000,0x0,0x4000000,0x0,0x80b000,0x0,0x8000,0x0,0x0,0x80b000,0x0,0x0,0xa050400,0x0,0x0,0x0,0x2000000,0xa050400,0x8050000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x40,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x4000000,0x80b000,0x0,0x0,0x20000020,0x20000020,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x10000200,0x10000200,0x0,0x10000200,0x10000200,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0xa0,0xa0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000020,0x20000020,0x0,0x20000020,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x6049ac0,0x0,0x0,0x800,0x800,0x20080104,0x0,0x0,0x400000,0x0,0x0,0x400000,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x0,0x20080100,0x0,0x20080100,0x0,0x0,0x20080100,0x4,0x0,0x60492c0,0x0,0x0,0x0,0x0,0x60492c0,0x2040080,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x4000200,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x10,0x0,0x40000020,0x0,0x0,0x40000000,0x0,0x0,0x0,0x400,0x0,0x40000020,0x0,0x0,0x0,0x40000000,0x0,0x400000,0x41410000,0x0,0x40000000,0x40000000,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x20090100,0x0,0x200,0x0,0x0,0x200000,0x0,0x0,0x2000,0x8100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x8100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x40000000,0x0,0x0,0x0,0x400000,0x41410000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x6a86011,0x800,0x800,0x2000,0x2000,0x10002,0x0,0x0,0x0,0x800,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x10002,0x0,0x10002,0x0,0x0,0x10002,0x0,0x0,0x6a84011,0x0,0x20,0x80,0x0,0x6a84011,0x6a00010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x20000001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x8,0x8000,0x8000000,0x400000,0x400000,0x8400000,0x0,0x1001,0x0,0x0,0x20000001,0x0,0x0,0x2000000,0x0,0x0,0x1001,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000001,0x0,0x0,0x0,0x1,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x10102,0x40,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x1001,0x0,0x1000,0x1001,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1001,0x0,0x2000001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x1200810,0x200000,0x200000,0x0,0x0,0x4200180,0x10000000,0x10000000,0x8000000,0x200000,0x10000000,0x8000000,0x200000,0x0,0x80000000,0x80000000,0x0,0x80000000,0x0,0x180,0x200000,0x180,0x40000000,0x10000000,0x180,0x0,0x200000,0x1200810,0x200,0x0,0x200000,0x0,0x1200810,0x10,0x0,0x10000000,0x0,0x1200000,0x200000,0x200,0x0,0x0,0x200000,0x800,0x200000,0x0,0x0,0x0,0x10000000,0x10200000,0x200000,0x13208000,0x2000,0x0,0x1200000,0x40000000,0x1200000,0x40000000,0x0,0x10000000,0x2000,0x0,0x2,0x0,0x4000,0x20,0x0,0x10,0x10,0x0,0x200000,0x17208000,0x400,0x40000000,0x13208000,0x40000000,0x10000000,0x40,0x0,0x200000,0x17208000,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x13208000,0x0,0x0,0x0,0x0,0x13208000,0x0,0x0,0x4200000,0x0,0x0,0x40000000,0x0,0x0,0x208000,0x0,0x0,0x80000000,0x80000000,0x4200180,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x8,0x40000000,0x17208000,0x200000,0x17208000,0x40000000,0x0,0x1200000,0x40000000,0x200000,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x0,0x0,0x17208000,0x0,0x0,0x17208000,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x17208000,0x0,0x17208000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17208000,0x0,0x0,0x0,0x0,0x17208000,0x17208000,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x4,0x0,0x10,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x0,0x180,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x0,0x0,0x0,0xfe0040,0x0,0xfe0040,0x0,0x0,0x0,0x0,0x0,0x380,0x380,0xc00,0xc00,0x1000,0x180,0x180,0x1e000,0x10,0x1e000,0x0,0x0,0x10,0x10,0x0,0xfe0040,0x10,0x0,0x180,0x180,0x180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x580,0x0,0x180,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180,0x0,0x0,0x180,0xfe0040,0x0,0xfe0040,0x0,0x0,0x0,0x0,0x180,0x0,0x180,0x0,0x0,0x380,0x380,0xc00,0xc00,0x1000,0x180,0x180,0x0,0x0,0x10,0x10,0x0,0x0,0x580,0x580,0x10,0x10,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[21];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public FormsPlSql(java.io.InputStream stream) {
     this(stream, null);
  }
  public FormsPlSql(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FormsPlSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 185; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 185; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FormsPlSql(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FormsPlSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 185; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 185; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public FormsPlSql(FormsPlSqlTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 185; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(FormsPlSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 185; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[153];
    for (int i = 0; i < 153; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 185; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 153; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 21; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

      // main ends here
}
